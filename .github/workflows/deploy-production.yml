name: Deploy production
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '**/README.md'
#      - '**/.github/**'
      - '**/.gitignore'
jobs:
  kubeval-lint: 
     runs-on: ubuntu-20.04
     name: Kubeval tools
     environment: production

     steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Validate template kubernetes manifests using Kubeval
       uses: stefanprodan/kube-tools@v1.7.1
       with:
         kubeval: v0.16.1
         command: |
           hostname
           echo "Run kubeval"
           kubeval -d manifestos --strict --ignore-missing-schemas
  build-push:
   runs-on: ubuntu-20.04
   name: Build ECR image
   environment: production
   needs: [kubeval-lint]
   if: |
     always() &&
     !contains(needs.*.result, 'failure') &&
     !contains(needs.*.result, 'cancelled')
   steps:
   - name: Checkout code
     uses: actions/checkout@v2
     run: |
       export DOCKER_REGISTRY=ezmo/webapp
   
   - name: Login to Docker Hub
     uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
     with:
       registry: ${DOCKER_REGISTRY}
       username: ${{ secrets.DOCKERHUB_USERNAME }}
       password: ${{ secrets.DOCKERHUB_TOKEN }}

   - name: Extract metadata (tags, labels) for Docker
     id: meta
     uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
     with:
       images: ${DOCKER_REGISTRY}

   - name: Build and push Docker image
     uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
     with:
       context: .
       push: true
       tags: $(echo ${GITHUB_SHA} | cut -c1-8)

#     id: login-docker
#     env:
#       DOCKER_REGISTRY: public.ecr.aws/o3h3e6d4
#       DOCKER_REPOSITORY: webapp
#     run: |
#       docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$(echo ${GITHUB_SHA} | cut -c1-8) .
#       docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$(echo ${GITHUB_SHA} | cut -c1-8) 

  GitOps:
    runs-on: ubuntu-20.04
    name: GitOps
    environment: production
    needs: [build-push]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    steps:
    - name: Checkout Manifest
      uses: actions/checkout@v2

    - name: Build manifest to GitOps
      env:
        DOCKER_REGISTRY: 520044189785.dkr.ecr.us-west-2.amazonaws.com/webapp
        REPO_NAME: webapp
      run: |
        echo "Preenchendo manifesto"
        export TAG_IMAGE=`echo ${GITHUB_SHA} | cut -c1-8`
        mkdir /tmp/app-metal
        envsubst <./manifestos/deployment.yaml > /tmp/app-metal/deployment.yaml
    
    - name: Validate kubernetes manifests using Kubeval
      run: |
        echo "Run kubeval"
        docker run -v /tmp/app-metal:/app garethr/kubeval -d /app --strict
    
    - name: Checkout repo K8s flux
      uses: actions/checkout@v2
      env: 
        GIT_REPOSITORY: 'EzzioMoreira/flux-k8s'
      with:
        repository: 'EzzioMoreira/flux-k8s'
        token: ${{ secrets.API_TOKEN_GITHUB }}
        path: production
    
    - name: Github commit, PR repo k8s flux
      run: |
        cd /home/runner/work/app-react/app-react
        export GIT_COMMIT=`git log -n 1 --pretty=format:"%s - autor: %an email: %ce"`
        export TAG_IMAGE=`echo ${GITHUB_SHA} | cut -c1-8`
        export GIT_EMAIL=`git log -n 1 --pretty=format:%ae`
        cd -
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email '$GIT_EMAIL'
        git clone https://EzzioMoreira:${{ secrets.API_TOKEN_GITHUB }}@github.com/EzzioMoreira/flux-k8s --branch=master $TAG_IMAGE
        cd $TAG_IMAGE
        git checkout -b release/production/$TAG_IMAGE
        git remote set-url origin https://EzzioMoreira:${{ secrets.API_TOKEN_GITHUB }}@github.com/EzzioMoreira/flux-k8s.git
        cp -r /tmp/app-metal ./clusters/production/apps
        git add -A
        git commit -m "$GIT_COMMIT"
        git push --set-upstream origin release/production/$TAG_IMAGE
