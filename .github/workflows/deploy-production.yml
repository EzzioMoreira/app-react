name: Deploy production
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '**/README.md'
#      - '**/.github/**'
#      - '**/.gitignore'
jobs:
  kubeval-lint: 
     runs-on: ubuntu-20.04
     name: Kubeval tools
     environment: production

     steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Validate template kubernetes manifests using Kubeval
       uses: stefanprodan/kube-tools@v1.7.1
       with:
         kubeval: v0.16.1
         command: |
           hostname
           echo "Run kubeval"
           kubeval -d manifestos --strict --ignore-missing-schemas
  build-push:
   runs-on: ubuntu-20.04
   name: Build ECR image
   environment: production
   needs: [kubeval-lint]
   if: |
     always() &&
     !contains(needs.*.result, 'failure') &&
     !contains(needs.*.result, 'cancelled')
   steps:
   - name: Checkout code
     uses: actions/checkout@v2
   
   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v1
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{ secrets.AWS_REGION }}
   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1
   - name: Build, tag, and push image to Amazon ECR
     env:
       ECR_REGISTRY: 520044189785.dkr.ecr.us-west-2.amazonaws.com
       ECR_REPOSITORY: webapp
     run: |
       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$(echo ${GITHUB_SHA} | cut -c1-8) .
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$(echo ${GITHUB_SHA} | cut -c1-8) 
  GitOps:
    runs-on: ubuntu-20.04
    name: GitOps
    environment: production
    needs: [build-push]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    steps:
    - name: Checkout Manifest
      uses: actions/checkout@v2

    - name: Build manifest to GitOps
      env:
        ECR_REGISTRY: 520044189785.dkr.ecr.us-west-2.amazonaws.com/webapp
        REPO_NAME: webapp
      run: |
        echo "Preenchendo manifesto"
        export TAG_IMAGE=`echo ${GITHUB_SHA} | cut -c1-8`
        mkdir /tmp/app-metal
        envsubst <./manifestos/deployment.yaml > /tmp/app-metal/deployment.yaml
    
    - name: Validate kubernetes manifests using Kubeval
      run: |
        echo "Run kubeval"
        docker run -v /tmp/app-metal:/app garethr/kubeval -d /app --strict
    
    - name: Checkout repo K8s flux
      uses: actions/checkout@v2
      env: 
        GIT_REPOSITORY: 'EzzioMoreira/flux-k8s'
      with:
        repository: ${GIT_REPOSITORY}
        token: ${{ secrets.API_TOKEN_GITHUB }}
        path: production
    
    - name: Github commit, PR repo k8s flux
      run: |
        cd /home/runner/work/app-react/app-react
        export GIT_COMMIT=`git log -n 1 --pretty=format:"%s - autor: %an email: %ce"`
        export TAG_IMAGE=`echo ${GITHUB_SHA} | cut -c1-8`
        export GIT_EMAIL=`git log -n 1 --pretty=format:%ae`
        cd -
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email '$GIT_EMAIL'
        git clone https://${GITHUB_ACTOR}:${{ secrets.API_TOKEN_GITHUB }}@github.com/flux-k8s --branch=master $TAG_IMAGE
        cd $TAG_IMAGE
        git checkout -b release/production/$TAG_IMAGE
        git remote set-url origin https://${GITHUB_ACTOR}:${{ secrets.API_TOKEN_GITHUB }}@github.com/flux-k8s.git
        cp -r /tmp/app-metal ./production/apps
        git add -A
        git commit -m "$GIT_COMMIT"
        git push --set-upstream origin release/production/$TAG_IMAGE
